# This file is included from include/Makefile.defs

# Put things here which the user will likely reconfigure
# based on system resources

ifndef COMPILE_WITH_UNST
COMPILE_WITH_UNST = 0
endif
COMPILE_WITH_HDF5 = 0
USE_H5CPP = 0

#  -ffast-math : sacrifice IEEE compliance for speed
#    (sets -fno-math-errno, -funsafe-math-optimizations,
#    -fno-trapping-math, -ffinite-math-only, -fno-rounding-math,
#    -fno-signaling-nans and fcx-limited-range.)
#  -fno-finite-math-only : so we can still test for NAN
#  -funsafe-math-optimizations : using this flag (instead of --ffast-math)
#     seems to give most of the benefit of -ffast-math
#     (e.g. "/" = "*reciprocal")
#FAST_MATH = -ffast-math -fno-finite-math-only

# -E: show preprocessor output
# useful compiler flags:
#   -pg : instrument for profiling (see gprof)
#   -ggdb : produce debugging information (see gdb)
#   -fopenmp : take #pragma omp parallel for
#   $(FAST_MATH) : sacrifice IEEE compliance for speed
#   -O4 : use level-4 optimization
#   -DCHECK_BOUNDS : use bounds-checking in tensor class (expensive)
#   -DMAX_DEBUG_LEVEL=3 : allow level-3 debug
#   -pthread : posix threads -- needed for apps/semi_lagrangian/*/StepAdvec.cpp
#            : you do not need to include this flag when compiling on mac os x

# serial code with optimizer turned on:
LINK = time g++ -O3 #-fopenmp

# serial code with debugging options (this runs slow!)
#LINK = time g++ -ggdb -DCHECK_BOUNDS

# the following symbol is deprecated
FFLAGS =  -c $(INCLUDE_LIBS)
# in favor of
COMPILE = $(LINK) $(FFLAGS) #$(COMPILE_FLAGS)
# do not define COMPILE_FLAGS here;
# applications and libraries will override it
# COMPILE_FLAGS =

CTAGS = ctags --extra=+q
#
# instead of using g++ and explicitly including HDF5 libraries
# one can instead use the h5c++ script:
## 
# -show: display g++ commands that would be executed
# -echo: show *all* commands and execute them

ifeq ($(COMPILE_WITH_HDF5),1)
    ifeq ($(USE_H5CPP),1)
        # override compiler with h5c++ script
        LINK    = /usr/local/hdf5/bin/h5c++
    else
        # The user might have installed these libraries elsewhere
        HDF5_INCLUDES = \
            -I/usr/local/hdf5/include \
            -I/usr/local/szip/include \
            -I/usr/local/zlib/include
        # Do we really need all these libraries?
        HDF5_LIBRARIES = \
            -L/usr/local/zlib/lib \
            -L/usr/local/szip/lib \
            -L/usr/local/hdf5/lib \
            /usr/local/hdf5/lib/libhdf5_hl_cpp.a \
            /usr/local/hdf5/lib/libhdf5_cpp.a \
            /usr/local/hdf5/lib/libhdf5_hl.a \
            /usr/local/hdf5/lib/libhdf5.a \
            -lsz \
            -lz \
            -lm
    endif
else
HDF5_INCLUDES = 
HDF5_LIBRARIES = 
endif
