#ifndef DIFFUSION_H
#define DIFFUSION_H
// #include <cmath>
#include "constants.h"

// constants for generalized heat flux,
// described in dogpack_notes/diffusion2.tex
//
// using initial row and column of zeros
// so I don't have to decrement the index

// matrix of entries that may be nonzero for x derivative coefficients
const int Bx_nonzero[7][7] = {
  {0,   0,   0,   0,   0,   0,   0},
  {0,   1,   1,   0,   0,   1,   0},
  {0,   1,   1,   0,   0,   1,   0},
  {0,   0,   0,   1,   1,   0,   0},
  {0,   0,   0,   1,   1,   0,   0},
  {0,   1,   1,   0,   0,   1,   0},
  {0,   0,   0,   0,   0,   0,   1}
};

const int By_nonzero[7][7] = {
  {0,   0,   0,   0,   0,   0,   0},
  {0,   1,   0,   1,   0,   0,   1},
  {0,   0,   1,   0,   1,   0,   0},
  {0,   1,   0,   1,   0,   0,   1},
  {0,   0,   1,   0,   1,   0,   0},
  {0,   0,   0,   0,   0,   1,   0},
  {0,   1,   0,   1,   0,   0,   1},
};

// symmetric matrix of positive edge inner products
// average(phi[l](x=x_{i+1/2}) phi[k](=x_{i+1/2}))
const double Bxpp[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,  sq3,   0.,   0.,  sq5,   0.},
  {0.,  sq3,   3.,   0.,   0., sq15,   0.},
  {0.,   0.,   0.,   1.,  sq3,   0.,   0.},
  {0.,   0.,   0.,  sq3,   3.,   0.,   0.},
  {0.,  sq5, sq15,   0.,   0.,   5.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   1.}
};

// Bxpp with columns 2 and 4 negated
const double Bxpm[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,- sq3,   0.,   0.,  sq5,   0.},
  {0.,  sq3,-  3.,   0.,   0., sq15,   0.},
  {0.,   0.,   0.,   1.,- sq3,   0.,   0.},
  {0.,   0.,   0.,  sq3,-  3.,   0.,   0.},
  {0.,  sq5,-sq15,   0.,   0.,   5.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   1.}
};

// Bxpp with rows 2 and 4 negated
const double Bxmp[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,  sq3,   0.,   0.,  sq5,   0.},
  {0.,- sq3,-  3.,   0.,   0.,-sq15,   0.},
  {0.,   0.,   0.,   1.,  sq3,   0.,   0.},
  {0.,   0.,   0.,- sq3,-  3.,   0.,   0.},
  {0.,  sq5, sq15,   0.,   0.,   5.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   1.}
};

// Bxpp with rows 2 and 4 and columns 2 and 4 negated
const double Bxmm[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,- sq3,   0.,   0.,  sq5,   0.},
  {0.,- sq3,   3.,   0.,   0.,-sq15,   0.},
  {0.,   0.,   0.,   1.,- sq3,   0.,   0.},
  {0.,   0.,   0.,- sq3,   3.,   0.,   0.},
  {0.,  sq5,-sq15,   0.,   0.,   5.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   1.}
};

// Bxpp after swapping columns and rows 2,3 and 5,6.
const double Bypp[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,   0.,  sq3,   0.,   0.,  sq5},
  {0.,   0.,   1.,   0.,  sq3,   0.,   0.},
  {0.,  sq3,   0.,   3.,   0.,   0., sq15},
  {0.,   0.,  sq3,   0.,   3.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   1.,   0.},
  {0.,  sq5,   0., sq15,   0.,   0.,   5.},
};

// Bypp with columns 3 and 4 negated
const double Bypm[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,   0.,- sq3,   0.,   0.,  sq5},
  {0.,   0.,   1.,   0.,- sq3,   0.,   0.},
  {0.,  sq3,   0.,-  3.,   0.,   0., sq15},
  {0.,   0.,  sq3,   0.,-  3.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   1.,   0.},
  {0.,  sq5,   0.,-sq15,   0.,   0.,   5.},
};

// Bypp with rows 3 and 4 negated
const double Bymp[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,   0.,  sq3,   0.,   0.,  sq5},
  {0.,   0.,   1.,   0.,  sq3,   0.,   0.},
  {0.,- sq3,   0.,-  3.,   0.,   0.,-sq15},
  {0.,   0.,- sq3,   0.,-  3.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   1.,   0.},
  {0.,  sq5,   0., sq15,   0.,   0.,   5.},
};

// Bxpp with rows 3 and 4 and columns 3 and 4 negated
const double Bymm[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,   0.,- sq3,   0.,   0.,  sq5},
  {0.,   0.,   1.,   0.,- sq3,   0.,   0.},
  {0.,- sq3,   0.,   3.,   0.,   0.,-sq15},
  {0.,   0.,- sq3,   0.,   3.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   1.,   0.},
  {0.,  sq5,   0.,-sq15,   0.,   0.,   5.},
};

// average(dx*phi[l],x phi[k])
const double half_Sx[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,  sq3,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,  sq3,   0.,   0.,   0.},
  {0.,   0., sq15,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
};

// half_Sx after swapping columns and rows 2,3 and 5,6.
const double half_Sy[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,  sq3,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,  sq3,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0., sq15,   0.,   0.,   0.},
};

// Bxpp-Sx
const double Axp[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,  sq3,   0.,   0.,  sq5,   0.},
  {0.,- sq3,   3.,   0.,   0., sq15,   0.},
  {0.,   0.,   0.,   1.,  sq3,   0.,   0.},
  {0.,   0.,   0.,- sq3,   3.,   0.,   0.},
  {0.,  sq5,-sq15,   0.,   0.,   5.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   1.}
};

// Bypp-Sy
const double Ayp[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,   0.,  sq3,   0.,   0.,  sq5},
  {0.,   0.,   1.,   0.,  sq3,   0.,   0.},
  {0.,- sq3,   0.,   3.,   0.,   0., sq15},
  {0.,   0.,- sq3,   0.,   3.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   1.,   0.},
  {0.,  sq5,   0.,-sq15,   0.,   0.,   5.},
};

// Bxmm + Sx
const double Axm[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,- sq3,   0.,   0.,  sq5,   0.},
  {0.,  sq3,   3.,   0.,   0.,-sq15,   0.},
  {0.,   0.,   0.,   1.,- sq3,   0.,   0.},
  {0.,   0.,   0.,  sq3,   3.,   0.,   0.},
  {0.,  sq5, sq15,   0.,   0.,   5.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   1.}
};

// Bymm + Sy
const double Aym[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   1.,   0.,- sq3,   0.,   0.,  sq5},
  {0.,   0.,   1.,   0.,- sq3,   0.,   0.},
  {0.,  sq3,   0.,   3.,   0.,   0.,-sq15},
  {0.,   0.,  sq3,   0.,   3.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   1.,   0.},
  {0.,  sq5,   0., sq15,   0.,   0.,   5.},
};

// half(Bxpp - Bxmm) - half_Sx
const double half_Cx[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,- sq3,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0., sq15,   0.},
  {0.,   0.,   0.,   0.,  sq3,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
};

// half(Bypp - Bymm) - half_Sy
const double half_Cy[7][7] = {
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,- sq3,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,  sq3,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0., sq15},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
  {0.,   0.,   0.,   0.,   0.,   0.,   0.},
};

#endif
