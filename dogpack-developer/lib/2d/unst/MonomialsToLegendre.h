#ifndef _MONOMIALSTOLEGENDRE_H_
#define _MONOMIALSTOLEGENDRE_H_

// Change of basis matrix for mapping Monomials to (orthogonal) Legendre
// polynomials.  For example,
//
// Monomials = { 1, \xi, \eta, \xi*\eta, \xi^2, \eta^2, \eta*\xi^2, \xi*\eta^2, ...  },
//
// whereas the Legendre polynomials are all orthogonal.
//
// If mu describes the monomials, then the Legendre polynomails are given by
//
//    phi = Mmat * mu.
//
// See also: Legendre2d_Unst, L2Project_Unst, L2ProjectGrad_Unst, Output_Unst, 
//
// SetEdgeData and SetEdgeDataGL_Unst

#include "constants.h"

// Reference?  How were these constructed? -DS
const double Mmat[15][15] = 
{
    {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 3.0*sq2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, sq2*sq3, 2.0*sq2*sq3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {(5.0/21.0)*sq7, 8.0/sq7, 8.0/sq7, 60.0/sq7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-10.0/9.0*(sq3/sq7), -2.0/(sq3*sq7), 4.0*sq3/sq7, 30.0*sq3/sq7, 5.0*sq3*sq7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.0/9.0*sq3*sq5, 2.0*sq5/sq3, 0, 6.0*sq3*sq5, sq3*sq5, 6.0*sq3*sq5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-8.0*sq3*sq13/117.0, 20.0/(sq3*sq13), -20.0/(sq3*sq13), 20.0*sq3/sq13, 40.0*sq3/sq13, 0, 210.0*sq3/sq13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-8.0/351.0*sq3*sq5*sq13*sq19, -4.0/247.0*sq3*sq5*sq13*sq19, 4.0/247.0*sq3*sq5*sq13*sq19, (20.0/39.0)*sq3*sq5*sq13*sq19, (344.0/741.0)*sq3*sq5*sq13*sq19, (32.0/57.0)*sq3*sq5*sq13*sq19, (602.0/247.0)*sq3*sq5*sq13*sq19, (56.0/19.0)*sq3*sq5*sq13*sq19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -52.0/(sq3*sq19), -(8.0/19.0)*sq3*sq19, (8.0/3.0)*sq3*sq19, -4.0/(sq3*sq19), 80.0/(sq3*sq19), (392.0/19.0)*sq3*sq19, (140.0/19.0)*sq3*sq19, 14.0*sq3*sq19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -(4.0/3.0)*sq7, -(8.0/3.0)*sq7, 8.0*sq7, 4.0*sq7, 0, 24.0*sq7, 60.0*sq7, 2.0*sq7, 40.0*sq7, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-(2.0/27.0)*sq5*sq7, -(26.0/21.0)*sq5*sq7, -(4.0/21.0)*sq5*sq7, -6.0*sq5*sq7, sq5*sq7, 0, 0, 0, 16.0*sq5*sq7, 0, 72.0*sq5*sq7, 0.0, 0.0, 0.0, 0.0},
    {-(2.0/1053.0)*sq5*sq7*sq13*sq23, (314.0/6279.0)*sq5*sq7*sq13*sq23, -(544.0/6279.0)*sq5*sq7*sq13*sq23, -(2.0/13.0)*sq5*sq7*sq13*sq23, -(47.0/897.0)*sq5*sq7*sq13*sq23, (70.0/897.0)*sq5*sq7*sq13*sq23, 0.0, 0.0, -(752.0/897.0)*sq5*sq7*sq13*sq23, (1120.0/897.0)*sq5*sq7*sq13*sq23, -(1128.0/299.0)*sq5*sq7*sq13*sq23, (1680.0/299.0)*sq5*sq7*sq13*sq23, 0.0, 0.0, 0.0},
    {(55.0/74763.0)*sq7*sq13*sq71, -(440.0/2769.0)*sq7*sq13*sq71, -(440.0/2769.0)*sq7*sq13*sq71, -(140.0/923.0)*sq7*sq13*sq71, -(160.0/2769.0)*sq7*sq13*sq71, -(160.0/2769.0)*sq7*sq13*sq71, (360.0/71.0)*sq7*sq13*sq71, (360.0/71.0)*sq7*sq13*sq71, (6800.0/2769.0)*sq7*sq13*sq71, (6800.0/2769.0)*sq7*sq13*sq71, (10200.0/923.0)*sq7*sq13*sq71, (10200.0/923.0)*sq7*sq13*sq71, (1620.0/71.0)*sq7*sq13*sq71, 0.0, 0.0},
    {(2.0/639.0)*sq3*sq5*sq23*sq71, (4.0/14697.0)*sq3*sq5*sq23*sq71, -(280.0/14697.0)*sq3*sq5*sq23*sq71, -(20.0/71.0)*sq3*sq5*sq23*sq71, -(466.0/1633.0)*sq3*sq5*sq23*sq71, -(40.0/1633.0)*sq3*sq5*sq23*sq71, (60.0/71.0)*sq3*sq5*sq23*sq71, (60.0/sq71)*sq3*sq5*sq23, -(4.0/1633.0)*sq3*sq5*sq23*sq71, (280.0/1633.0)*sq3*sq5*sq23*sq71, (9780.0/1633.0)*sq3*sq5*sq23*sq71, (1260.0/1633.0)*sq3*sq5*sq23*sq71, (270.0/sq71)*sq3*sq5*sq23, 3.0*sq3*sq5*sq23*sq71, 0.0},
    {(2.0/9.0)*sq5, -(4.0/3.0)*sq5, 0.0, -20.0*sq5, -2.0*sq5, -20.0*sq5, 60.0*sq5, 60.0*sq5, 12.0*sq5, 0.0, 60.0*sq5, 420.0*sq5, 270.0*sq5, 3.0*sq5, 210.0*sq5}
};

#endif
